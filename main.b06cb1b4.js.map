{"version":3,"sources":["scripts/main.js"],"names":["grid","gridSize","cellsCount","start","document","querySelector","win","lose","score","scoreElement","startRestartButton","gameBoard","Grid","gridElement","cells","i","push","Cell","Math","floor","cellsGroupedByColumn","groupCellByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","raw","emptyCells","filter","cell","isEmpty","random","length","reduce","groupCells","x","y","createElement","classList","add","append","tile","setXY","linkedTile","linkedTileForMerge","newTile","hasTileForMerge","value","setValue","linkTile","toggle","updateScore","removeFromDOM","unlinkTileForMerge","Tile","tileElement","style","setProperty","textContent","bgLightness","log2","remove","setupInputOnce","window","addEventListener","handleInput","once","e","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","getRandomEmptyCell","slideTiles","groupedCells","forEach","group","slideTilesGroup","mergeTiles","j","cellWithTile","targetCell","canAccept","linkTileForMerge","unlinkTile","canMove","some","canMoveInGroup","index","game","innerText","replace","hidden","backgroundImage","innerHTML"],"mappings":"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","file":"main.b06cb1b4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gridSize = 4;\nconst cellsCount = gridSize * gridSize;\nconst start = document.querySelector('.message-start');\nconst win = document.querySelector('.message-win');\nconst lose = document.querySelector('.message-lose');\nlet score = 0;\nlet grid;\nconst scoreElement = document.querySelector('.game-score');\nconst startRestartButton = document.querySelector('.start');\nconst gameBoard = document.querySelector('.game-board');\n\nclass Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < cellsCount; i++) {\n      this.cells.push(new Cell(gridElement,\n        i % gridSize, Math.floor(i / gridSize)));\n    };\n\n    this.cellsGroupedByColumn = this.groupCellByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(column =>\n      [...column].reverse());\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(raw =>\n      [...raw].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellByColumn() {\n    return this.cells.reduce((groupCells, cell) => {\n      groupCells[cell.x] = groupCells[cell.x] || [];\n      groupCells[cell.x][cell.y] = cell;\n\n      return groupCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupCells, cell) => {\n      groupCells[cell.y] = groupCells[cell.y] || [];\n      groupCells[cell.y][cell.x] = cell;\n\n      return groupCells;\n    }, []);\n  }\n}\n\nclass Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty()\n      || (!this.hasTileForMerge()\n      && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value\n      + this.linkedTileForMerge.value);\n\n    if (this.linkTile.value === 2048) {\n      win.classList.toggle('hidden');\n      start.classList.toggle('hidden');\n\n      return;\n    }\n\n    score += this.linkedTile.value;\n    updateScore();\n\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n  }\n}\n\nclass Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.5 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n\n    const bgLightness = 100 - Math.log2(value) * 9;\n\n    this.tileElement.style.setProperty('--bg-lightness', `${bgLightness}%`);\n\n    this.tileElement.style.setProperty('--text-lightness',\n      `${bgLightness < 50 ? 90 : 10}%`);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n}\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    lose.classList.toggle('hidden');\n    start.classList.toggle('hidden');\n\n    return;\n  }\n\n  setupInputOnce();\n}\n\nfunction moveUp() {\n  slideTiles(grid.cellsGroupedByColumn);\n}\n\nfunction moveDown() {\n  slideTiles(grid.cellsGroupedByReversedColumn);\n}\n\nfunction moveLeft() {\n  slideTiles(grid.cellsGroupedByRow);\n}\n\nfunction moveRight() {\n  slideTiles(grid.cellsGroupedByReversedRow);\n}\n\nfunction slideTiles(groupedCells) {\n  groupedCells.forEach(group => slideTilesGroup(group));\n\n  grid.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n}\n\nfunction slideTilesGroup(group) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n\nfunction updateScore() {\n  scoreElement.textContent = score;\n}\n\nfunction game() {\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  setupInputOnce();\n};\n\nstartRestartButton.addEventListener('click', () => {\n  win.classList.add('hidden');\n  lose.classList.add('hidden');\n\n  if (startRestartButton.innerText === 'Start') {\n    startRestartButton.innerText = 'Restart';\n    startRestartButton.classList.replace('start', 'restart');\n    start.hidden = true;\n    gameBoard.style.backgroundImage = 'none';\n    grid = new Grid(gameBoard);\n  } else {\n    score = 0;\n    gameBoard.innerHTML = '';\n    grid = new Grid(gameBoard);\n    updateScore();\n  }\n  game();\n});\n"]}